// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(AGENT)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // Application relations
  assignedCases Case[] @relation("AssignedAgent")
  activities    CaseActivity[]

  @@map("users")
}

model Case {
  id          String     @id @default(cuid())
  caseNumber  String     @unique @default(cuid())
  title       String
  description String     @db.Text
  status      CaseStatus @default(OPEN)
  priority    Priority   @default(MEDIUM)
  category    String?
  source      CaseSource @default(WEB_FORM)
  
  // Contact Information
  contactName  String?
  contactEmail String?
  contactPhone String?
  
  // Assignment
  assignedToId String?
  assignedTo   User?   @relation("AssignedAgent", fields: [assignedToId], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  resolvedAt  DateTime?
  closedAt    DateTime?
  
  // SLA tracking
  dueDate     DateTime?
  isOverdue   Boolean  @default(false)
  
  // Relations
  activities  CaseActivity[]
  attachments CaseAttachment[]

  @@map("cases")
}

model CaseActivity {
  id        String           @id @default(cuid())
  caseId    String
  userId    String?
  type      ActivityType
  title     String
  content   String?          @db.Text
  isInternal Boolean         @default(false)
  createdAt DateTime         @default(now())

  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id])

  @@map("case_activities")
}

model CaseAttachment {
  id        String   @id @default(cuid())
  caseId    String
  fileName  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  createdAt DateTime @default(now())

  case Case @relation(fields: [caseId], references: [id], onDelete: Cascade)

  @@map("case_attachments")
}

// Enums
enum UserRole {
  ADMIN
  SUPERVISOR
  AGENT
  VIEWER
}

enum CaseStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CaseSource {
  WEB_FORM
  EMAIL
  PHONE
  IN_PERSON
  SOCIAL_MEDIA
}

enum ActivityType {
  CREATED
  ASSIGNED
  STATUS_CHANGED
  COMMENT
  EMAIL_SENT
  EMAIL_RECEIVED
  RESOLVED
  CLOSED
}